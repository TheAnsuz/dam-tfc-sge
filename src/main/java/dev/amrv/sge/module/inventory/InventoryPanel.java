/*
 */
package dev.amrv.sge.module.inventory;

import dev.amrv.sge.SGE;
import dev.amrv.sge.SGEFileSystem;
import dev.amrv.sge.io.CSVWriter;
import dev.amrv.sge.module.providers.Provider;
import dev.amrv.sge.window.SGENotifier;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Collection;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;

/**
 *
 * @author Adrian Martin Ruiz del Valle Aka. Ansuz
 */
public final class InventoryPanel extends javax.swing.JPanel implements PopupMenuListener {

    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("dd-MM-yyyy_HH-mm-ss");

    private final InventoryTreeModel treeModel;
    private final SGE sge;
    private final JPopupMenu popup;

    public InventoryPanel(SGE sge) {
        this.sge = sge;
        initComponents();
        treeModel = new InventoryTreeModel(sge, jTree1);
        //jTree1.setCellRenderer(new InventoryTreeRenderer(treeModel));
        this.popup = generatePopupMenu();
        jTree1.setComponentPopupMenu(popup);
        popup.addPopupMenuListener(this);
    }

    protected JPopupMenu generatePopupMenu() {
        final JPopupMenu menu = new JPopupMenu();

        menu.add(menuCreateCategory);
        menu.add(menuCreateProduct);
        menu.addSeparator();
        menu.add(menuModify);
        menu.add(menuDelete);
        menu.addSeparator();
        menu.add(menuUpdate);

        return menu;
    }

    public void recreateTree() {
        treeModel.clear();

        try {
            for (InventoryCategory category : InventoryCategory.getRoot(sge.getDatabase())) {
                final InventoryTreeNode node = new InventoryTreeNode(category);
                node.reload(sge.getDatabase());
                treeModel.add(node);
            }
        } catch (SQLException ex) {
            SGENotifier.displayError(this, "Error", "Error loading categories", ex);
        }

        treeModel.reload();
        jTree1.setModel(treeModel.getModel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuCreateCategory = new javax.swing.JMenuItem();
        menuCreateProduct = new javax.swing.JMenuItem();
        menuDelete = new javax.swing.JMenuItem();
        menuUpdate = new javax.swing.JMenuItem();
        menuModify = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        buttonExport = new javax.swing.JButton();

        menuCreateCategory.setText("Crear categoria");
        menuCreateCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCreateCategoryActionPerformed(evt);
            }
        });

        menuCreateProduct.setText("Crear producto");
        menuCreateProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCreateProductActionPerformed(evt);
            }
        });

        menuDelete.setText("Eliminar");
        menuDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDeleteActionPerformed(evt);
            }
        });

        menuUpdate.setText("Actualizar");
        menuUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuUpdateActionPerformed(evt);
            }
        });

        menuModify.setText("Modificar");
        menuModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModifyActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setRootVisible(false);
        jTree1.setScrollsOnExpand(false);
        jTree1.setShowsRootHandles(true);
        jScrollPane1.setViewportView(jTree1);

        buttonExport.setText("Exportar");
        buttonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonExport)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonExport)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void menuCreateCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCreateCategoryActionPerformed
        InventoryCategory parent = null;

        if (treeModel.getPopupItem() != null) {

            final InventoryTreeNode node = treeModel.getPopupItem();

            if (node.isCategory())
                parent = node.getAsCategory();
        }

        try {
            InventoryCategory created = InventoryCategory.create(sge.getDatabase(), JOptionPane.showInputDialog(this, "Nombre de categoria"), parent);

            treeModel.add(treeModel.getPopupItem(), new InventoryTreeNode(created));

            if (parent == null)
                treeModel.reload();

        } catch (SQLException ex) {
            SGENotifier.displayError(this, "Error", "No se puede crear la categoria", ex);
            sge.logger.error(ex);
        }

        treeModel.clearPopupItem();
    }//GEN-LAST:event_menuCreateCategoryActionPerformed

    private void menuUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuUpdateActionPerformed
        if (treeModel.getPopupItem() == null)
            recreateTree();
        else
            treeModel.reload(treeModel.getPopupItem());

        treeModel.clearPopupItem();
    }//GEN-LAST:event_menuUpdateActionPerformed

    private void menuDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDeleteActionPerformed
        if (treeModel.getPopupItem() == null)
            return;

        final InventoryTreeNode node = treeModel.getPopupItem();

        if (node.isCategory()) {
            try {
                node.getAsCategory().delete(sge.getDatabase());
                InventoryTreeNode parent = (InventoryTreeNode) node.getParent();
                node.removeFromParent();
                treeModel.reload(parent);
            } catch (SQLException ex) {
                sge.logger.error(ex);
                SGENotifier.displayError(this, "Error", "No se puede eliminar la categoria " + node.getAsCategory().getName(), ex);
            }
        } else {
            try {
                node.getAsProduct().delete(sge.getDatabase());
                InventoryTreeNode parent = (InventoryTreeNode) node.getParent();
                node.removeFromParent();
                treeModel.reload(parent);
            } catch (SQLException ex) {
                sge.logger.error(ex);
                SGENotifier.displayError(this, "Error", "No se puede eliminar el producto " + node.getAsProduct().getName(), ex);
            }
        }

        treeModel.clearPopupItem();
    }//GEN-LAST:event_menuDeleteActionPerformed

    private void menuCreateProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCreateProductActionPerformed
        if (treeModel.getPopupItem() == null)
            return;

        final InventoryTreeNode node = treeModel.getPopupItem();

        if (!node.isCategory())
            return;

        final InventoryCategory parent = node.getAsCategory();
        try {

            CreateProductWindow createProductWindow = new CreateProductWindow(sge, this);
            createProductWindow.displayCategory(parent);
            createProductWindow.updateProviders();
            createProductWindow.setVisible(true);

            InventoryProduct product = createProductWindow.getCreatedProduct();
            Collection<InventoryAttribute> attributes = InventoryAttribute.getAll(sge.getDatabase(), product).values();

            treeModel.add(node, new InventoryTreeNode(product, attributes));

            treeModel.reload(node);

        } catch (SQLException ex) {
            SGENotifier.displayError(this, "Error", "No se ha podido intentar crear el producto", ex);
            sge.logger.error(ex);
        }

        treeModel.clearPopupItem();
    }//GEN-LAST:event_menuCreateProductActionPerformed

    private void menuModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModifyActionPerformed
        final InventoryTreeNode node = treeModel.getPopupItem();

        if (node == null)
            return;

        if (node.isCategory()) {
            InventoryCategory category = node.getAsCategory();

            category.setName(JOptionPane.showInputDialog(this, "Modificar " + category.getName()));
            try {
                category.commit(sge.getDatabase());
            } catch (SQLException ex) {
                SGENotifier.displayError(this, "Error", "No se ha podido modificar la categoria", ex);
                sge.logger.error(ex);
            }
            treeModel.reload(node);
        } else {
            InventoryProduct product = node.getAsProduct();

            CreateProductWindow createProductWindow = new CreateProductWindow(sge, this);
            try {
                createProductWindow.displayProduct(product);
                createProductWindow.updateProviders();
            } catch (SQLException ex) {
                SGENotifier.displayError(this, "Error", "No se ha podido modificar el producto", ex);
                sge.logger.error(ex);
            }
            createProductWindow.setVisible(true);

            try {
                node.reload(sge.getDatabase());
            } catch (SQLException ex) {
                sge.logger.error(ex);
            }

            treeModel.reload(node.getParent());
        }
    }//GEN-LAST:event_menuModifyActionPerformed

    private void buttonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportActionPerformed
        String directoryPath = sge.getProperties().getProperty("inventory.exportDirectory", SGEFileSystem.getSource().getAbsolutePath());

        File dir = SGENotifier.requestFileSaveDirectory(this,"Selecciona una carpeta en la que guardar la exportacion", new File(directoryPath));

        if (dir == null)
            return;

        sge.getProperties().setProperty("inventory.exportDirectory", dir.getAbsolutePath());

        final String fileName = "inventory_" + LocalDateTime.now().format(FORMATTER) + ".csv";
        final File exportFile = new File(dir, fileName);
        try (CSVWriter writer = new CSVWriter(exportFile)) {
            writer.addLine("CATEGORIA", "PROVEDOR", "PRODUCT", "ATRIBUTOS", "CANTIDAD");

            for (InventoryProduct product : InventoryProduct.getAll(sge.getDatabase())) {
                writer.add(InventoryCategory.get(sge.getDatabase(), product.getCategoryID()).getName());
                writer.add(Provider.get(sge.getDatabase(), product.getProviderID()).getName());
                writer.add(product.getName());

                StringBuilder attributeString = new StringBuilder();
                Collection<InventoryAttribute> attributes = InventoryAttribute.getAll(sge.getDatabase(), product).values();

                for (InventoryAttribute attribute : attributes) {
                    attributeString.append(attribute.getKey()).append("=").append(attribute.getValue()).append(",");
                }
                if (!attributes.isEmpty())
                    attributeString.deleteCharAt(attributeString.length() - 1).deleteCharAt(attributeString.length() - 1);

                writer.add(attributeString.toString());
                writer.add(product.getAmount() + "");
                writer.nextLine();
            }

        } catch (IOException ex) {
            SGENotifier.displayError(this, "Error exportando datos", "No se ha podido exportar el inventario", ex);
            return;
        } catch (SQLException ex) {
            SGENotifier.displayError(this, "Error exportando datos", "No se ha podido cargar el inventario", ex);
            return;
        } catch (Exception e) {
            SGENotifier.displayError(this, "Error exportando datos", "Error del sistema exportando datos", e);
            return;
        }
        SGENotifier.informate(this, "Inventario", "Se ha exportado el inventario actual al fichero:\n" + exportFile.getAbsolutePath());
    }//GEN-LAST:event_buttonExportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonExport;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuItem menuCreateCategory;
    private javax.swing.JMenuItem menuCreateProduct;
    private javax.swing.JMenuItem menuDelete;
    private javax.swing.JMenuItem menuModify;
    private javax.swing.JMenuItem menuUpdate;
    // End of variables declaration//GEN-END:variables

    @Override
    public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
        final InventoryTreeNode node = treeModel.getPopupItem();

        if (node == null) {
            menuCreateProduct.setEnabled(false);
            menuCreateCategory.setEnabled(true);
            menuDelete.setEnabled(false);
            menuModify.setEnabled(false);

        } else if (node.isCategory()) {
            menuCreateCategory.setEnabled(true);
            menuCreateProduct.setEnabled(true);
            menuDelete.setEnabled(node.getChildCount() == 0);
            menuModify.setEnabled(true);

        } else {
            menuCreateProduct.setEnabled(false);
            menuCreateCategory.setEnabled(false);
            menuDelete.setEnabled(true);
            menuModify.setEnabled(true);
        }
    }

    @Override
    public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
    }

    @Override
    public void popupMenuCanceled(PopupMenuEvent e) {
    }
}
